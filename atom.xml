<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-23T10:48:29.745Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>goframe实践｜实践</title>
    <link href="http://example.com/2024/08/23/goframe%E6%A1%86%E6%9E%B6/goframe%E5%AE%9E%E8%B7%B5%EF%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2024/08/23/goframe%E6%A1%86%E6%9E%B6/goframe%E5%AE%9E%E8%B7%B5%EF%BD%9C%E5%AE%9E%E8%B7%B5/</id>
    <published>2024-08-23T10:48:06.617Z</published>
    <updated>2024-08-23T10:48:29.745Z</updated>
    
    
    
    
    <category term="goframe框架" scheme="http://example.com/categories/goframe%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>goframe实践｜架构与目录</title>
    <link href="http://example.com/2024/08/23/goframe%E6%A1%86%E6%9E%B6/goframe%E5%AE%9E%E8%B7%B5%EF%BD%9C%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%9B%AE%E5%BD%95/"/>
    <id>http://example.com/2024/08/23/goframe%E6%A1%86%E6%9E%B6/goframe%E5%AE%9E%E8%B7%B5%EF%BD%9C%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%9B%AE%E5%BD%95/</id>
    <published>2024-08-23T10:48:06.617Z</published>
    <updated>2024-08-23T10:49:16.530Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试&lt;/p&gt;
</summary>
      
    
    
    
    <category term="goframe框架" scheme="http://example.com/categories/goframe%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>goframe实践｜初始化</title>
    <link href="http://example.com/2024/08/23/goframe%E6%A1%86%E6%9E%B6/goframe%E5%AE%9E%E8%B7%B5%EF%BD%9C%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://example.com/2024/08/23/goframe%E6%A1%86%E6%9E%B6/goframe%E5%AE%9E%E8%B7%B5%EF%BD%9C%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2024-08-23T10:24:46.637Z</published>
    <updated>2024-08-23T10:32:41.159Z</updated>
    
    
    
    
    <category term="goframe框架" scheme="http://example.com/categories/goframe%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>golang-module详解</title>
    <link href="http://example.com/2024/07/24/golang/golang-module%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2024/07/24/golang/golang-module%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-07-24T02:57:55.000Z</published>
    <updated>2024-07-24T02:59:29.582Z</updated>
    
    <content type="html"><![CDATA[<p>以此文总结下目前自己掌握的go module知识</p><blockquote><p> 引用《go专家编程》<a class="link"   href="https://docs.kilvn.com/GoExpertProgramming/chapter12/3-foreword.html" >https://docs.kilvn.com/GoExpertProgramming/chapter12/3-foreword.html<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以此文总结下目前自己掌握的go module知识&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 引用《go专家编程》&lt;a class=&quot;link&quot;   href=&quot;https://docs.kilvn.com/GoExpertProgramming/chapter12/3-fo</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf详解</title>
    <link href="http://example.com/2024/07/22/gin/Protobuf%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2024/07/22/gin/Protobuf%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-07-22T07:53:59.000Z</published>
    <updated>2024-08-23T10:20:05.345Z</updated>
    
    
    
    
    <category term="gin" scheme="http://example.com/categories/gin/"/>
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>centos-python基础镜像构建</title>
    <link href="http://example.com/2024/07/18/%E9%9A%8F%E7%AC%94/centos-python%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>http://example.com/2024/07/18/%E9%9A%8F%E7%AC%94/centos-python%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</id>
    <published>2024-07-18T11:32:22.000Z</published>
    <updated>2024-07-18T11:33:49.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a class="link"   href="https://www.cnblogs.com/leeona/p/18282312" >https://www.cnblogs.com/leeona/p/18282312<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>上述方案解决centos:7基础镜像无法pip的问题</p><blockquote><p><a class="link"   href="https://www.cnblogs.com/Jimc/p/10218387.html" >https://www.cnblogs.com/Jimc/p/10218387.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.cnblogs.com/Jimc/p/10218062.html" >https://www.cnblogs.com/Jimc/p/10218062.html<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>源码编译安装python3.8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/leeona/p/18282312&quot; &gt;https://www.cnblogs.com/leeona/p/18282312&lt;i class=&quot;fas f</summary>
      
    
    
    
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>centos9安装mysql服务端记录</title>
    <link href="http://example.com/2024/07/18/%E9%9A%8F%E7%AC%94/centos9%E5%AE%89%E8%A3%85mysql%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2024/07/18/%E9%9A%8F%E7%AC%94/centos9%E5%AE%89%E8%A3%85mysql%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AE%B0%E5%BD%95/</id>
    <published>2024-07-18T09:01:57.000Z</published>
    <updated>2024-07-18T09:04:44.341Z</updated>
    
    <content type="html"><![CDATA[<p>安装的主要流程：<a class="link"   href="https://www.sjkjc.com/posts/install-mysql8-on-centos-stream-9/" >https://www.sjkjc.com/posts/install-mysql8-on-centos-stream-9/<i class="fas fa-external-link-alt"></i></a></p><p>之后，远程登录的时候，会报错：</p><p>mysql -h ‘安装mysql服务端机器的IP’ -u root</p><p>ERROR 1130 (HY000): Host ‘客户端的IP’ is not allowed to connect to this MySQL server这个错误什么原因导致的。</p><p>这通常是由于 MySQL 的权限设置导致的。</p><p>MySQL 的权限系统允许数据库管理员指定哪些用户可以从哪些主机连接到服务器。在这个案例中，尽管你使用了 <code>root</code> 用户，但可能 <code>root</code> 用户没有从 <code>客户端IP</code> 这个 IP 地址连接到服务器的权限。</p><p>在 MySQL 中，<code>GRANT</code> 语句用于分配权限，但是 <code>IDENTIFIED BY</code> 子句用于创建用户或更改用户密码，并不应该在 <code>GRANT</code> 语句中使用。因此，你遇到的错误是因为语法不正确。</p><p>你应该首先确保用户 <code>root</code>@<code>客户端IP</code> 存在，如果不存在，你需要先创建这个用户，然后再分配权限。以下是正确的步骤：</p><ol><li><p>创建用户（如果尚不存在）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;root&#x27;@&#x27;客户端IP&#x27; IDENTIFIED BY &#x27;WingKin45@&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>分配权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;客户端IP&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li><li><p>使权限更改生效</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>按照这些步骤操作后，<code>root</code> 用户应该能够从 IP 地址 <code>客户端IP</code> 连接到 MySQL 服务器，并拥有所有数据库和表的权限。如果你仍然遇到问题，请检查 MySQL 服务器的配置文件（如 <code>my.cnf</code> 或 <code>my.ini</code>），确保没有限制远程连接的设置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装的主要流程：&lt;a class=&quot;link&quot;   href=&quot;https://www.sjkjc.com/posts/install-mysql8-on-centos-stream-9/&quot; &gt;https://www.sjkjc.com/posts/install-mysq</summary>
      
    
    
    
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>docker命令</title>
    <link href="http://example.com/2024/07/18/%E9%9A%8F%E7%AC%94/docker%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2024/07/18/%E9%9A%8F%E7%AC%94/docker%E5%91%BD%E4%BB%A4/</id>
    <published>2024-07-18T07:59:02.000Z</published>
    <updated>2024-07-20T10:32:49.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h2><blockquote><p><a class="link"   href="https://yeasy.gitbook.io/docker_practice/image/commit" >https://yeasy.gitbook.io/docker_practice/image/commit<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>1.docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit \</span><br><span class="line">    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \</span><br><span class="line">    --message &quot;修改了默认网页&quot; \</span><br><span class="line">    webserver \</span><br><span class="line">    nginx:v2</span><br><span class="line">sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-常用命令&quot;&gt;&lt;a href=&quot;#docker-常用命令&quot; class=&quot;headerlink&quot; title=&quot;docker 常用命令&quot;&gt;&lt;/a&gt;docker 常用命令&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   hre</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://example.com/2024/07/16/%E9%9A%8F%E7%AC%94/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/07/16/%E9%9A%8F%E7%AC%94/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-07-16T12:04:28.000Z</published>
    <updated>2024-07-16T12:14:58.315Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a class="link"   href="https://blog.csdn.net/justloveyou_/article/details/64127789" >https://blog.csdn.net/justloveyou_/article/details/64127789<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>golang的单例模式：</p><blockquote><p><a class="link"   href="https://blog.csdn.net/qq_43035350/article/details/125536474" >https://blog.csdn.net/qq_43035350/article/details/125536474<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/justloveyou_/article/details/64127789&quot; &gt;https://blog.csdn.net/justloveyou_/art</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ToDoList</title>
    <link href="http://example.com/2024/07/15/%E9%9A%8F%E7%AC%94/ToDoList/"/>
    <id>http://example.com/2024/07/15/%E9%9A%8F%E7%AC%94/ToDoList/</id>
    <published>2024-07-15T08:40:18.000Z</published>
    <updated>2024-07-15T08:42:30.439Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li>Golang</li><li>mysql</li><li>redis</li><li>rabbitmq</li><li></li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li>秒杀</li><li>网关</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;li&gt;rabbitmq&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Orbstack虚拟机安装docker</title>
    <link href="http://example.com/2024/07/15/%E9%9A%8F%E7%AC%94/Orbstack%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85docker/"/>
    <id>http://example.com/2024/07/15/%E9%9A%8F%E7%AC%94/Orbstack%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85docker/</id>
    <published>2024-07-15T03:53:27.000Z</published>
    <updated>2024-07-16T12:05:53.521Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>golang-gin框架实践(一)|请求与Context</title>
    <link href="http://example.com/2024/07/09/gin/golang-gin%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2024/07/09/gin/golang-gin%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/</id>
    <published>2024-07-09T11:36:47.000Z</published>
    <updated>2024-08-23T10:22:54.877Z</updated>
    
    <content type="html"><![CDATA[<p>gin是一个简洁高效的web框架，自然而然就肯定会有与请求信息相关的处理逻辑。本文从这个角度来看下gin框架是怎么做的。</p><p>目录如下：</p><ul><li>RestAPI</li><li>Gin中处理请求的接口</li></ul><h2 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h2><blockquote><p><a class="link"   href="https://restfulapi.cn/" >https://restfulapi.cn/<i class="fas fa-external-link-alt"></i></a>  ！！！！必看</p><p><a class="link"   href="https://aws.amazon.com/cn/what-is/restful-api/" >https://aws.amazon.com/cn/what-is/restful-api/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://cloud.tencent.com/developer/article/2360813" >https://cloud.tencent.com/developer/article/2360813<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>表征状态传输 (REST) 是一种软件架构，决定了 API 的工作条件。REST 最初作为管理复杂网络（例如互联网）上的通信的指南而建立。您可以使用基于 REST 的架构为高性能和可靠的大规模通信提供支持。您可以轻松应用和修改此种架构，为任何 API 系统带来可见性和跨平台可能性。</p><h3 id="Restful-API风格"><a href="#Restful-API风格" class="headerlink" title="Restful API风格"></a>Restful API风格</h3><p>传统url接口与Restful风格接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端请求传统url接口REST ful风格接口</span><br><span class="line">查询所有用户/user/findAllGET /users</span><br><span class="line">查询编号为1的用户 /user/findById?id=1 GET /user/1         </span><br><span class="line">新增一个用户   /user/save POST /user</span><br><span class="line">修改编号为1的用户    /user/updatePUT /user/1</span><br><span class="line">删除编号为1的用户    /user/delete?id=1DELETE /user/1</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">HTTP Method</th><th align="left">资源操作</th><th align="left">CRUD操作</th><th align="left">安全性</th><th align="left">幂等性</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">SELECT</td><td align="left">SELECT</td><td align="left">安全</td><td align="left">幂等</td><td align="left">读操作安全，查询一次多次结果一致</td></tr><tr><td align="left">POST</td><td align="left">INSERT</td><td align="left">CREATE</td><td align="left">非安全</td><td align="left">非幂等</td><td align="left">写操作非安全，每多插入一次都会出现新结果</td></tr><tr><td align="left">PUT</td><td align="left">UPDATE</td><td align="left">UPDATE</td><td align="left">非安全</td><td align="left">幂等</td><td align="left">写操作非安全，一次和多次更新结果一致</td></tr><tr><td align="left">DELETE</td><td align="left">DELETE</td><td align="left">DELETE</td><td align="left">非安全</td><td align="left">幂等</td><td align="left">写操作非安全，一次和多次删除结果一致</td></tr></tbody></table><p>Restful API设计遵循以下几个规范：</p><ul><li>使用HTTP Method动词来表达操作</li><li>使用名词来表示资源</li><li>使用URL来定位资源</li><li>使用查询参数来过滤和分页</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取前10个用户：GET /users?limit=10</span><br><span class="line">获取第二页的用户：GET /users?page=2&amp;limit=10</span><br></pre></td></tr></table></figure><ul><li><p>使用HTTP状态码来表示请求结果</p></li><li><p>使用json或xml来表示数据</p></li><li><p>使用版本号来管理API</p></li><li><p>提供清晰的错误信息</p></li><li><p>使用标准的HTTP头部</p><p>使用HTTP头部中的<strong>Accept</strong>和<strong>Content-Type</strong>字段进行内容协商，以确定客户端期望的表示形式和服务器返回的表示形式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接受JSON格式的响应：Accept: application/json</span><br><span class="line">发送JSON格式的请求体：Content-Type: application/json</span><br></pre></td></tr></table></figure></li></ul><h2 id="Gin中请求的流转"><a href="#Gin中请求的流转" class="headerlink" title="Gin中请求的流转"></a>Gin中请求的流转</h2><blockquote><p><a class="link"   href="https://www.cnblogs.com/yuanwebpage/p/16818047.html" >https://www.cnblogs.com/yuanwebpage/p/16818047.html<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>gin框架的底层采用golang原生网络库net&#x2F;http，遵循one connection per goroutine的原则。因此在讲解gin处理request之前，我们需要看看go的原生网络库net&#x2F;http是怎么处理请求的。</p><h3 id="net-http如何处理请求"><a href="#net-http如何处理请求" class="headerlink" title="net&#x2F;http如何处理请求"></a>net&#x2F;http如何处理请求</h3><p>利用net&#x2F;http处理请求的代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(rw http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        io.WriteString(rw, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    &#125;) <span class="comment">// 注册路由</span></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;localhost:8000&quot;</span>, <span class="literal">nil</span>) <span class="comment">// 启动服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，http.HandleFunc()用于注册路由。所谓路由，就是给定一个URL地址，要找到处理该URL的函数，自然最理想的结构就是map，map的key保存URL地址，value保存处理URL的响应函数(handler)，这样就能根据URL，快速定位函数并执行调用。http.HandleFunc()将这个路由map保存到了默认的服务端实例DefaultServeMux（ServeMux结构体对象）上，ServeMux的结构如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServeMux <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu    sync.RWMutex  <span class="comment">// 读写锁，用于并发访问路由map时加锁保护</span></span><br><span class="line">    m     <span class="keyword">map</span>[<span class="type">string</span>]muxEntry <span class="comment">// 保存路由的map</span></span><br><span class="line">    es    []muxEntry <span class="comment">// slice of entries sorted from longest to shortest. 基于路径保存的handler列表</span></span><br><span class="line">    hosts <span class="type">bool</span>       <span class="comment">// whether any patterns contain hostnames</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> muxEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">    h       Handler <span class="comment">// Handler是go的标准网络处理函数，任何实现了ServeHTTP(ResponseWriter, *Request)的函数都可以作为Handler</span></span><br><span class="line">    pattern <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>http.HandleFunc()具体功能就是将用户定义的Handler函数保存到DefaultServeMux.m中，原理较为简单，在此不再赘述。</p><p><img   src="https://raw.githubusercontent.com/miller-star/picture/master/1951229-20221023100944302-1862362530.png" ></p><h2 id="Gin中处理请求的接口"><a href="#Gin中处理请求的接口" class="headerlink" title="Gin中处理请求的接口"></a>Gin中处理请求的接口</h2><p>主要通过context结构体中的相关方法来处理请求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context is the most important part of gin. It allows us to pass variables between middleware,</span></span><br><span class="line"><span class="comment">// manage the flow, validate the JSON of a request and render a JSON response for example.</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">writermem responseWriter</span><br><span class="line">Request   *http.Request</span><br><span class="line">Writer    ResponseWriter</span><br><span class="line"></span><br><span class="line">Params   Params</span><br><span class="line">handlers HandlersChain</span><br><span class="line">index    <span class="type">int8</span></span><br><span class="line"></span><br><span class="line">engine *Engine</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keys is a key/value pair exclusively for the context of each request.</span></span><br><span class="line">Keys <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Errors is a list of errors attached to all the handlers/middlewares who used this context.</span></span><br><span class="line">Errors errorMsgs</span><br><span class="line"></span><br><span class="line"><span class="comment">// Accepted defines a list of manually accepted formats for content negotiation.</span></span><br><span class="line">Accepted []<span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>context类型的全部方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/************************************/</span></span><br><span class="line"><span class="comment">/************ INPUT DATA ************/</span></span><br><span class="line"><span class="comment">/************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Param returns the value of the URL param.</span></span><br><span class="line"><span class="comment">// It is a shortcut for c.Params.ByName(key)</span></span><br><span class="line"><span class="comment">//     router.GET(&quot;/user/:id&quot;, func(c *gin.Context) &#123;</span></span><br><span class="line"><span class="comment">//         // a GET request to /user/john</span></span><br><span class="line"><span class="comment">//         id := c.Param(&quot;id&quot;) // id == &quot;john&quot;</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Param(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Params.ByName(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query returns the keyed url query value if it exists,</span></span><br><span class="line"><span class="comment">// otherwise it returns an empty string `(&quot;&quot;)`.</span></span><br><span class="line"><span class="comment">// It is shortcut for `c.Request.URL.Query().Get(key)`</span></span><br><span class="line"><span class="comment">//     GET /path?id=1234&amp;name=Manu&amp;value=</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;id&quot;) == &quot;1234&quot;</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;name&quot;) == &quot;Manu&quot;</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;value&quot;) == &quot;&quot;</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;wtf&quot;) == &quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Query(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">value, _ := c.GetQuery(key)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultQuery returns the keyed url query value if it exists,</span></span><br><span class="line"><span class="comment">// otherwise it returns the specified defaultValue string.</span></span><br><span class="line"><span class="comment">// See: Query() and GetQuery() for further information.</span></span><br><span class="line"><span class="comment">//     GET /?name=Manu&amp;lastname=</span></span><br><span class="line"><span class="comment">//     c.DefaultQuery(&quot;name&quot;, &quot;unknown&quot;) == &quot;Manu&quot;</span></span><br><span class="line"><span class="comment">//     c.DefaultQuery(&quot;id&quot;, &quot;none&quot;) == &quot;none&quot;</span></span><br><span class="line"><span class="comment">//     c.DefaultQuery(&quot;lastname&quot;, &quot;none&quot;) == &quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> DefaultQuery(key, defaultValue <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> value, ok := c.GetQuery(key); ok &#123;</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> defaultValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQuery is like Query(), it returns the keyed url query value</span></span><br><span class="line"><span class="comment">// if it exists `(value, true)` (even when the value is an empty string),</span></span><br><span class="line"><span class="comment">// otherwise it returns `(&quot;&quot;, false)`.</span></span><br><span class="line"><span class="comment">// It is shortcut for `c.Request.URL.Query().Get(key)`</span></span><br><span class="line"><span class="comment">//     GET /?name=Manu&amp;lastname=</span></span><br><span class="line"><span class="comment">//     (&quot;Manu&quot;, true) == c.GetQuery(&quot;name&quot;)</span></span><br><span class="line"><span class="comment">//     (&quot;&quot;, false) == c.GetQuery(&quot;id&quot;)</span></span><br><span class="line"><span class="comment">//     (&quot;&quot;, true) == c.GetQuery(&quot;lastname&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> GetQuery(key <span class="type">string</span>) (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> values, ok := c.GetQueryArray(key); ok &#123;</span><br><span class="line"><span class="keyword">return</span> values[<span class="number">0</span>], ok</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryArray returns a slice of strings for a given query key.</span></span><br><span class="line"><span class="comment">// The length of the slice depends on the number of params with the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> QueryArray(key <span class="type">string</span>) []<span class="type">string</span> &#123;</span><br><span class="line">values, _ := c.GetQueryArray(key)</span><br><span class="line"><span class="keyword">return</span> values</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQueryArray returns a slice of strings for a given query key, plus</span></span><br><span class="line"><span class="comment">// a boolean value whether at least one value exists for the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> GetQueryArray(key <span class="type">string</span>) ([]<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> values, ok := c.Request.URL.Query()[key]; ok &amp;&amp; <span class="built_in">len</span>(values) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> values, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">string</span>&#123;&#125;, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryMap returns a map for a given query key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> QueryMap(key <span class="type">string</span>) <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">dicts, _ := c.GetQueryMap(key)</span><br><span class="line"><span class="keyword">return</span> dicts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQueryMap returns a map for a given query key, plus a boolean value</span></span><br><span class="line"><span class="comment">// whether at least one value exists for the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> GetQueryMap(key <span class="type">string</span>) (<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> c.get(c.Request.URL.Query(), key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostForm returns the specified key from a POST urlencoded form or multipart form</span></span><br><span class="line"><span class="comment">// when it exists, otherwise it returns an empty string `(&quot;&quot;)`.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostForm(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">value, _ := c.GetPostForm(key)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultPostForm returns the specified key from a POST urlencoded form or multipart form</span></span><br><span class="line"><span class="comment">// when it exists, otherwise it returns the specified defaultValue string.</span></span><br><span class="line"><span class="comment">// See: PostForm() and GetPostForm() for further information.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> DefaultPostForm(key, defaultValue <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> value, ok := c.GetPostForm(key); ok &#123;</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> defaultValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetPostForm is like PostForm(key). It returns the specified key from a POST urlencoded</span></span><br><span class="line"><span class="comment">// form or multipart form when it exists `(value, true)` (even when the value is an empty string),</span></span><br><span class="line"><span class="comment">// otherwise it returns (&quot;&quot;, false).</span></span><br><span class="line"><span class="comment">// For example, during a PATCH request to update the user&#x27;s email:</span></span><br><span class="line"><span class="comment">//     email=mail@example.com  --&gt;  (&quot;mail@example.com&quot;, true) := GetPostForm(&quot;email&quot;) // set email to &quot;mail@example.com&quot;</span></span><br><span class="line"><span class="comment">//    email=                  --&gt;  (&quot;&quot;, true) := GetPostForm(&quot;email&quot;) // set email to &quot;&quot;</span></span><br><span class="line"><span class="comment">//                             --&gt;  (&quot;&quot;, false) := GetPostForm(&quot;email&quot;) // do nothing with email</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> GetPostForm(key <span class="type">string</span>) (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> values, ok := c.GetPostFormArray(key); ok &#123;</span><br><span class="line"><span class="keyword">return</span> values[<span class="number">0</span>], ok</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostFormArray returns a slice of strings for a given form key.</span></span><br><span class="line"><span class="comment">// The length of the slice depends on the number of params with the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostFormArray(key <span class="type">string</span>) []<span class="type">string</span> &#123;</span><br><span class="line">values, _ := c.GetPostFormArray(key)</span><br><span class="line"><span class="keyword">return</span> values</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetPostFormArray returns a slice of strings for a given form key, plus</span></span><br><span class="line"><span class="comment">// a boolean value whether at least one value exists for the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> GetPostFormArray(key <span class="type">string</span>) ([]<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">req := c.Request</span><br><span class="line"><span class="keyword">if</span> err := req.ParseMultipartForm(c.engine.MaxMultipartMemory); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != http.ErrNotMultipart &#123;</span><br><span class="line">debugPrint(<span class="string">&quot;error on parse multipart form array: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> values := req.PostForm[key]; <span class="built_in">len</span>(values) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> values, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">string</span>&#123;&#125;, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostFormMap returns a map for a given form key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostFormMap(key <span class="type">string</span>) <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">dicts, _ := c.GetPostFormMap(key)</span><br><span class="line"><span class="keyword">return</span> dicts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetPostFormMap returns a map for a given form key, plus a boolean value</span></span><br><span class="line"><span class="comment">// whether at least one value exists for the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> GetPostFormMap(key <span class="type">string</span>) (<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">req := c.Request</span><br><span class="line"><span class="keyword">if</span> err := req.ParseMultipartForm(c.engine.MaxMultipartMemory); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != http.ErrNotMultipart &#123;</span><br><span class="line">debugPrint(<span class="string">&quot;error on parse multipart form map: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.get(req.PostForm, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get is an internal method and returns a map which satisfy conditions.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> get(m <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>, key <span class="type">string</span>) (<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">dicts := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">exist := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line"><span class="keyword">if</span> i := strings.IndexByte(k, <span class="string">&#x27;[&#x27;</span>); i &gt;= <span class="number">1</span> &amp;&amp; k[<span class="number">0</span>:i] == key &#123;</span><br><span class="line"><span class="keyword">if</span> j := strings.IndexByte(k[i+<span class="number">1</span>:], <span class="string">&#x27;]&#x27;</span>); j &gt;= <span class="number">1</span> &#123;</span><br><span class="line">exist = <span class="literal">true</span></span><br><span class="line">dicts[k[i+<span class="number">1</span>:][:j]] = v[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dicts, exist</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FormFile returns the first file for the provided form key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> FormFile(name <span class="type">string</span>) (*multipart.FileHeader, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> c.Request.MultipartForm == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := c.Request.ParseMultipartForm(c.engine.MaxMultipartMemory); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_, fh, err := c.Request.FormFile(name)</span><br><span class="line"><span class="keyword">return</span> fh, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MultipartForm is the parsed multipart form, including file uploads.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> MultipartForm() (*multipart.Form, <span class="type">error</span>) &#123;</span><br><span class="line">err := c.Request.ParseMultipartForm(c.engine.MaxMultipartMemory)</span><br><span class="line"><span class="keyword">return</span> c.Request.MultipartForm, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SaveUploadedFile uploads the form file to specific dst.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> SaveUploadedFile(file *multipart.FileHeader, dst <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">src, err := file.Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> src.Close()</span><br><span class="line"></span><br><span class="line">out, err := os.Create(dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> out.Close()</span><br><span class="line"></span><br><span class="line">_, err = io.Copy(out, src)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind checks the Content-Type to select a binding engine automatically,</span></span><br><span class="line"><span class="comment">// Depending the &quot;Content-Type&quot; header different bindings are used:</span></span><br><span class="line"><span class="comment">//     &quot;application/json&quot; --&gt; JSON binding</span></span><br><span class="line"><span class="comment">//     &quot;application/xml&quot;  --&gt; XML binding</span></span><br><span class="line"><span class="comment">// otherwise --&gt; returns an error.</span></span><br><span class="line"><span class="comment">// It parses the request&#x27;s body as JSON if Content-Type == &quot;application/json&quot; using JSON or XML as a JSON input.</span></span><br><span class="line"><span class="comment">// It decodes the json payload into the struct specified as a pointer.</span></span><br><span class="line"><span class="comment">// It writes a 400 error and sets Content-Type header &quot;text/plain&quot; in the response if input is not valid.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Bind(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">b := binding.Default(c.Request.Method, c.ContentType())</span><br><span class="line"><span class="keyword">return</span> c.MustBindWith(obj, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BindJSON is a shortcut for c.MustBindWith(obj, binding.JSON).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> BindJSON(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.MustBindWith(obj, binding.JSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BindXML is a shortcut for c.MustBindWith(obj, binding.BindXML).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> BindXML(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.MustBindWith(obj, binding.XML)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BindQuery is a shortcut for c.MustBindWith(obj, binding.Query).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> BindQuery(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.MustBindWith(obj, binding.Query)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BindYAML is a shortcut for c.MustBindWith(obj, binding.YAML).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> BindYAML(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.MustBindWith(obj, binding.YAML)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BindUri binds the passed struct pointer using binding.Uri.</span></span><br><span class="line"><span class="comment">// It will abort the request with HTTP 400 if any error occurs.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> BindUri(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindUri(obj); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) <span class="comment">// nolint: errcheck</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MustBindWith binds the passed struct pointer using the specified binding engine.</span></span><br><span class="line"><span class="comment">// It will abort the request with HTTP 400 if any error occurs.</span></span><br><span class="line"><span class="comment">// See the binding package.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> MustBindWith(obj <span class="keyword">interface</span>&#123;&#125;, b binding.Binding) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindWith(obj, b); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) <span class="comment">// nolint: errcheck</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBind checks the Content-Type to select a binding engine automatically,</span></span><br><span class="line"><span class="comment">// Depending the &quot;Content-Type&quot; header different bindings are used:</span></span><br><span class="line"><span class="comment">//     &quot;application/json&quot; --&gt; JSON binding</span></span><br><span class="line"><span class="comment">//     &quot;application/xml&quot;  --&gt; XML binding</span></span><br><span class="line"><span class="comment">// otherwise --&gt; returns an error</span></span><br><span class="line"><span class="comment">// It parses the request&#x27;s body as JSON if Content-Type == &quot;application/json&quot; using JSON or XML as a JSON input.</span></span><br><span class="line"><span class="comment">// It decodes the json payload into the struct specified as a pointer.</span></span><br><span class="line"><span class="comment">// Like c.Bind() but this method does not set the response status code to 400 and abort if the json is not valid.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBind(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">b := binding.Default(c.Request.Method, c.ContentType())</span><br><span class="line"><span class="keyword">return</span> c.ShouldBindWith(obj, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBindJSON is a shortcut for c.ShouldBindWith(obj, binding.JSON).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBindJSON(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.ShouldBindWith(obj, binding.JSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBindXML is a shortcut for c.ShouldBindWith(obj, binding.XML).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBindXML(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.ShouldBindWith(obj, binding.XML)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBindQuery is a shortcut for c.ShouldBindWith(obj, binding.Query).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBindQuery(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.ShouldBindWith(obj, binding.Query)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBindYAML is a shortcut for c.ShouldBindWith(obj, binding.YAML).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBindYAML(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.ShouldBindWith(obj, binding.YAML)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBindUri binds the passed struct pointer using the specified binding engine.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBindUri(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> c.Params &#123;</span><br><span class="line">m[v.Key] = []<span class="type">string</span>&#123;v.Value&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> binding.Uri.BindUri(m, obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBindWith binds the passed struct pointer using the specified binding engine.</span></span><br><span class="line"><span class="comment">// See the binding package.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBindWith(obj <span class="keyword">interface</span>&#123;&#125;, b binding.Binding) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.Bind(c.Request, obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShouldBindBodyWith is similar with ShouldBindWith, but it stores the request</span></span><br><span class="line"><span class="comment">// body into the context, and reuse when it is called again.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> This method reads the body before binding. So you should use</span></span><br><span class="line"><span class="comment">// ShouldBindWith for better performance if you need to call only once.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBindBodyWith(obj <span class="keyword">interface</span>&#123;&#125;, bb binding.BindingBody) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> body []<span class="type">byte</span></span><br><span class="line"><span class="keyword">if</span> cb, ok := c.Get(BodyBytesKey); ok &#123;</span><br><span class="line"><span class="keyword">if</span> cbb, ok := cb.([]<span class="type">byte</span>); ok &#123;</span><br><span class="line">body = cbb</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> body == <span class="literal">nil</span> &#123;</span><br><span class="line">body, err = ioutil.ReadAll(c.Request.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">c.Set(BodyBytesKey, body)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bb.BindBody(body, obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ClientIP implements a best effort algorithm to return the real client IP, it parses</span></span><br><span class="line"><span class="comment">// X-Real-IP and X-Forwarded-For in order to work properly with reverse-proxies such us: nginx or haproxy.</span></span><br><span class="line"><span class="comment">// Use X-Forwarded-For before X-Real-Ip as nginx uses X-Real-Ip with the proxy&#x27;s IP.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ClientIP() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.engine.ForwardedByClientIP &#123;</span><br><span class="line">clientIP := c.requestHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>)</span><br><span class="line">clientIP = strings.TrimSpace(strings.Split(clientIP, <span class="string">&quot;,&quot;</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> clientIP == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">clientIP = strings.TrimSpace(c.requestHeader(<span class="string">&quot;X-Real-Ip&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> clientIP != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> clientIP</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.engine.AppEngine &#123;</span><br><span class="line"><span class="keyword">if</span> addr := c.requestHeader(<span class="string">&quot;X-Appengine-Remote-Addr&quot;</span>); addr != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> addr</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ip, _, err := net.SplitHostPort(strings.TrimSpace(c.Request.RemoteAddr)); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ContentType returns the Content-Type header of the request.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ContentType() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> filterFlags(c.requestHeader(<span class="string">&quot;Content-Type&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsWebsocket returns true if the request headers indicate that a websocket</span></span><br><span class="line"><span class="comment">// handshake is being initiated by the client.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> IsWebsocket() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(strings.ToLower(c.requestHeader(<span class="string">&quot;Connection&quot;</span>)), <span class="string">&quot;upgrade&quot;</span>) &amp;&amp;</span><br><span class="line">strings.ToLower(c.requestHeader(<span class="string">&quot;Upgrade&quot;</span>)) == <span class="string">&quot;websocket&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> requestHeader(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Request.Header.Get(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;gin是一个简洁高效的web框架，自然而然就肯定会有与请求信息相关的处理逻辑。本文从这个角度来看下gin框架是怎么做的。&lt;/p&gt;
&lt;p&gt;目录如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RestAPI&lt;/li&gt;
&lt;li&gt;Gin中处理请求的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Re</summary>
      
    
    
    
    <category term="gin" scheme="http://example.com/categories/gin/"/>
    
    
    <category term="Gin" scheme="http://example.com/tags/Gin/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>beego简单介绍</title>
    <link href="http://example.com/2024/06/14/%E9%9A%8F%E7%AC%94/beego%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2024/06/14/%E9%9A%8F%E7%AC%94/beego%E5%AE%9E%E8%B7%B5/</id>
    <published>2024-06-14T01:58:48.000Z</published>
    <updated>2024-08-23T03:12:04.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单安装与入门"><a href="#简单安装与入门" class="headerlink" title="简单安装与入门"></a>简单安装与入门</h2><h3 id="安装命令行工具bee"><a href="#安装命令行工具bee" class="headerlink" title="安装命令行工具bee"></a>安装命令行工具bee</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/beego/bee/v2@latest</span><br></pre></td></tr></table></figure><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee new beego-Admin</span><br></pre></td></tr></table></figure><img     src="https://raw.githubusercontent.com/miller-star/picture/master/20240614100255.png"   style="zoom:50%;" ><p>目录结构如上图所示，是一个典型的MVC架构，M（models 目录）、V（views 目录）和 C（controllers 目录）的结构， <code>main.go</code> 是入口文件。</p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee run</span><br></pre></td></tr></table></figure><img     src="https://raw.githubusercontent.com/miller-star/picture/master/20240614100629.png"   style="zoom:50%;" ><p>这样，一个简单的demo就运行起来了</p><img     src="https://raw.githubusercontent.com/miller-star/picture/master/20240614100843.png"   style="zoom:50%;" ><h2 id="框架解析"><a href="#框架解析" class="headerlink" title="框架解析"></a>框架解析</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><img     src="https://raw.githubusercontent.com/beego/beedoc/master/zh-CN/images/architecture.png"   style="zoom:75%;" ><p>beego 是基于八大独立的模块构建的，是一个高度解耦的框架。当初设计 beego 的时候就是考虑功能模块化，用户即使不使用 beego 的 HTTP 逻辑，也依旧可以使用这些独立模块。</p><h3 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h3><p><img   src="https://raw.githubusercontent.com/beego/beedoc/master/zh-CN/images/init.png" ></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>beego官方给出了几个demo项目</p><p><a class="link"   href="https://github.com/beego/samples" >https://github.com/beego/samples<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单安装与入门&quot;&gt;&lt;a href=&quot;#简单安装与入门&quot; class=&quot;headerlink&quot; title=&quot;简单安装与入门&quot;&gt;&lt;/a&gt;简单安装与入门&lt;/h2&gt;&lt;h3 id=&quot;安装命令行工具bee&quot;&gt;&lt;a href=&quot;#安装命令行工具bee&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="web beego" scheme="http://example.com/tags/web-beego/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes学习</title>
    <link href="http://example.com/2024/04/09/kubernetes/kubernetes%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/04/09/kubernetes/kubernetes%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-04-09T02:44:09.000Z</published>
    <updated>2024-07-11T11:41:25.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="了解架构"><a href="#了解架构" class="headerlink" title="了解架构"></a>了解架构</h2><ul><li><p>控制平面</p><ul><li>etcd分布式持久化存储</li><li>API Server</li><li>controller manager</li><li>调度器</li></ul></li><li><p>工作节点</p><ul><li>kubelet</li><li>kubelet服务代理</li><li>容器运行时（如docker、rkt）</li></ul></li><li><p>附加组件</p><ul><li>kubernetes DNS服务器</li><li>仪表板</li><li>Ingress控制器</li><li>Heapster（容器集群监控）</li><li>CNI插件</li></ul></li></ul><img     src="https://raw.githubusercontent.com/miller-star/picture/master/20240410102847.png"   style="zoom:50%;" ><p>可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure><p>获取各个控制平面组件的健康状态</p><h2 id="API服务器的作用"><a href="#API服务器的作用" class="headerlink" title="API服务器的作用"></a>API服务器的作用</h2><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><img     src="https://raw.githubusercontent.com/miller-star/picture/master/20240411145447.png"   style="zoom:50%;"><p>认证插件：首先， API 服务器需要认证发送请求的客户端。 这是通过配置在 API 服务器上 的一个或多个认证插件来实现的。 API 服务器会轮流调用这些插件， 直到有一个能 确认是谁发送了该请求。 这是通过检查HTTP请求实现的。</p><p>授权插件：除了认证插件， API 服务器还可以配置使用一个或多个授权插件。 它们的作用 是决定认证的用户是否可以对请求资源执行请求操作。 例如， 当创建 pod 时， API 服务器会轮询所有的授权插件， 来确认该用户是否可以在请求命名空间创建 pod。 一旦插件确认了用户可以执行该操作， API 服务器会继续下一步操作。</p><p>准入插件：如果请求尝试创建、 修改或者删除一个资源，请求需要经过准入控制插件的验证。（注意：如果仅是读取资源，不会经过准入插件）</p><p>请求通过了所有的准入控制插件后， API 服务器会验证存储到 etcd 的对象， 然 后返回一个响应给客户端。</p><h3 id="通知客户端资源变更"><a href="#通知客户端资源变更" class="headerlink" title="通知客户端资源变更"></a>通知客户端资源变更</h3><p>API服务器的作用是启动控制器以及其他组件来监控已经部署资源的变更。</p><h2 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h2><h2 id="控制器管理器中运行的控制器"><a href="#控制器管理器中运行的控制器" class="headerlink" title="控制器管理器中运行的控制器"></a>控制器管理器中运行的控制器</h2><p>由于使用监听机制并不保证控制器不会漏掉时间， 所以 仍然需要定期执行重列举操作来确保不会丢掉什么。</p><h2 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h2><p>未完待续。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;了解架构&quot;&gt;&lt;a href=&quot;#了解架构&quot; class=&quot;headerlink&quot; title=&quot;了解架构&quot;&gt;&lt;/a&gt;了解架构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;控制平面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etcd分布式持久化存储&lt;/li&gt;
&lt;li&gt;API Server&lt;/l</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
</feed>
